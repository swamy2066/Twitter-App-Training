{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NarayanaSwamyTibiris\\\\my-app\\\\twitter-app\\\\src\\\\Components\\\\PostDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = 'http://localhost:5000';\nconst PostDetail = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get(`${BASE_URL}/posts/${id}`);\n        setPost(response.data);\n      } catch (err) {\n        setError('Failed to fetch posts');\n        console.error(err);\n      }\n    };\n    fetchPosts();\n  }, []);\n  useEffect(() => {\n    axios.get(`http://localhost:5000/posts/${id}`).then(response => {\n      setPost(response.data);\n    }).catch(error => {\n      console.error('Error fetching post:', error);\n    });\n    axios.get(`http://localhost:5000/comments?postId=${id}`).then(response => {\n      setComments(response.data);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching comments:', error);\n      setLoading(false);\n    });\n  }, [id]);\n  const handleAddComment = () => {\n    if (!newComment) return;\n    axios.post('http://localhost:5000/comments', {\n      text: newComment,\n      postId: id,\n      userId: 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }).then(response => {\n      setComments([...comments, response.data]);\n      setNewComment('');\n    }).catch(error => {\n      console.error('Error adding comment:', error);\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(PostDetail, \"krLZVHLVcr8UCesu1wiNZLRriak=\", false, function () {\n  return [useParams];\n});\n_c = PostDetail;\nexport default PostDetail;\nvar _c;\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","BASE_URL","PostDetail","_s","id","post","setPost","comments","setComments","newComment","setNewComment","loading","setLoading","fetchPosts","response","get","data","err","setError","console","error","then","catch","handleAddComment","text","postId","userId","createdAt","Date","toISOString","updatedAt","children","fileName","_jsxFileName","lineNumber","columnNumber","title","description","map","comment","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/NarayanaSwamyTibiris/my-app/twitter-app/src/Components/PostDetail.js"],"sourcesContent":["\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nconst BASE_URL = 'http://localhost:5000';\r\n\r\nconst PostDetail = () => {\r\n  const { id } = useParams(); \r\n  const [post, setPost] = useState(null);\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/posts/${id}`);\r\n            setPost(response.data); \r\n        } catch (err) {\r\n            setError('Failed to fetch posts');\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    fetchPosts();\r\n}, []);\r\n\r\n  useEffect(() => {\r\n\r\n    \r\n  \r\n    axios.get(`http://localhost:5000/posts/${id}`)\r\n      .then(response => {\r\n        setPost(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching post:', error);\r\n      });\r\n\r\n   \r\n    axios.get(`http://localhost:5000/comments?postId=${id}`)\r\n      .then(response => {\r\n        setComments(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching comments:', error);\r\n        setLoading(false);\r\n      });\r\n  }, [id]);\r\n\r\n  const handleAddComment = () => {\r\n    if (!newComment) return;\r\n\r\n    axios.post('http://localhost:5000/comments', {\r\n      text: newComment,\r\n      postId: id,\r\n      userId: 1, \r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    })\r\n      .then(response => {\r\n        setComments([...comments, response.data]);\r\n        setNewComment('');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error adding comment:', error);\r\n      });\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{post.title}</h2>\r\n      <p>{post.description}</p>\r\n\r\n      <div>\r\n        <h3>Comments</h3>\r\n        <ul>\r\n          {comments.map(comment => (\r\n            <li key={comment.id}>\r\n              <p>{comment.text}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n          placeholder=\"Add a comment\"\r\n        />\r\n        <button onClick={handleAddComment}>Add Comment</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}