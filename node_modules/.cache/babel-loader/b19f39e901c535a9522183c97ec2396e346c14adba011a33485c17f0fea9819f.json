{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NarayanaSwamyTibiris\\\\my-app\\\\twitter-app\\\\src\\\\Components\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProceedLogin = () => {\n  _s();\n  // Set up state for username and password\n  const [userName, setUserName] = useState(''); // State for username\n  const [password, setPassword] = useState(''); // State for password\n  const navigate = useNavigate(); // For navigation after successful login\n\n  const handleLogin = async e => {\n    e.preventDefault();\n\n    // Fetch user data by username\n    fetch(`http://localhost:5000/users/${userName}`).then(res => res.json()).then(resp => {\n      console.log(resp);\n\n      // Check if the response is empty (invalid username)\n      if (Object.keys(resp).length === 0) {\n        toast.error('Please Enter a valid username');\n      } else {\n        // Check if the passwords match\n        if (resp.password === password) {\n          toast.success('Login Success');\n          navigate('/'); // Redirect to the homepage or another page\n        } else {\n          toast.error('Invalid password');\n        }\n      }\n    }).catch(err => {\n      toast.error('Login Failed due to: ' + err.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userName,\n        onChange: e => setUserName(e.target.value),\n        placeholder: \"Username\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(ProceedLogin, \"PVGUX0KAIgdbaFyT6yvaMGdUhlE=\", false, function () {\n  return [useNavigate];\n});\n_c = ProceedLogin;\nexport default ProceedLogin;\nvar _c;\n$RefreshReg$(_c, \"ProceedLogin\");","map":{"version":3,"names":["React","useState","toast","useNavigate","jsxDEV","_jsxDEV","ProceedLogin","_s","userName","setUserName","password","setPassword","navigate","handleLogin","e","preventDefault","fetch","then","res","json","resp","console","log","Object","keys","length","error","success","catch","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/NarayanaSwamyTibiris/my-app/twitter-app/src/Components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ProceedLogin = () => {\r\n    // Set up state for username and password\r\n    const [userName, setUserName] = useState(''); // State for username\r\n    const [password, setPassword] = useState(''); // State for password\r\n    const navigate = useNavigate(); // For navigation after successful login\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Fetch user data by username\r\n        fetch(`http://localhost:5000/users/${userName}`)\r\n            .then((res) => res.json())\r\n            .then((resp) => {\r\n                console.log(resp);\r\n\r\n                // Check if the response is empty (invalid username)\r\n                if (Object.keys(resp).length === 0) {\r\n                    toast.error('Please Enter a valid username');\r\n                } else {\r\n                    // Check if the passwords match\r\n                    if (resp.password === password) {\r\n                        toast.success('Login Success');\r\n                        navigate('/'); // Redirect to the homepage or another page\r\n                    } else {\r\n                        toast.error('Invalid password');\r\n                    }\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                toast.error('Login Failed due to: ' + err.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={userName}\r\n                    onChange={(e) => setUserName(e.target.value)}\r\n                    placeholder=\"Username\"\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    placeholder=\"Password\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProceedLogin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}